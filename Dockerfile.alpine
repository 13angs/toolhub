# Dockerfile for Alpine Linux
# Results in a smaller image size, ideal for production.

# --- STAGE 1: Build Stage ---
FROM python:3.11-alpine AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV POETRY_VERSION=1.8.2

# Set the working directory
WORKDIR /app

# Install system dependencies for building
# Removed audio-related packages (portaudio-dev, alsa-lib-dev) as they are no longer needed.
# build-base is required for compiling some Python packages on Alpine.
RUN apk add --no-cache \
    ffmpeg \
    curl \
    build-base

# Install Poetry
RUN pip install "poetry==${POETRY_VERSION}"

# Copy dependency definition files
COPY pyproject.toml poetry.lock* ./

# Disable virtual environment creation by Poetry
RUN poetry config virtualenvs.create false

# Install project dependencies
# --no-dev: Excludes development dependencies
# --no-interaction: Prevents asking for user input
# --no-ansi: Disables ANSI output for cleaner logs
RUN poetry install --no-dev --no-interaction --no-ansi

# Copy the application source code
COPY . .


# --- STAGE 2: Final Stage ---
FROM python:3.11-alpine AS final

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set the working directory
WORKDIR /app

# Install only the necessary runtime system dependencies
# Removed audio-related runtime packages.
RUN apk add --no-cache ffmpeg

# Copy installed Python packages from the builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copy application code from the builder stage
COPY --from=builder /app /app

# Create a non-root user for security
# -D: Create a system user without a password
RUN adduser -D appuser
USER appuser

# Define the entrypoint
ENTRYPOINT ["python", "toolhub.py"]

# Set the default command
CMD ["--help"]