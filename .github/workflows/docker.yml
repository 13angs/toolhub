# .github/workflows/docker-publish.yml
name: Docker

# ทริกเกอร์ workflow นี้เมื่อมีการ push (merge) ไปที่ branch 'main' เท่านั้น
on:
  push:
    branches:
      - 'main'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # ใช้ strategy matrix เพื่อกำหนดค่า build ที่แตกต่างกันสำหรับแต่ละ Dockerfile
    strategy:
      matrix:
        include:
          - dockerfile: 'Dockerfile.debian'
            tag: 'debian'
          - dockerfile: 'Dockerfile.alpine'
            tag: 'alpine'

    steps:
      # 1. Checkout โค้ดล่าสุดจาก repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Login เข้าสู่ Docker Hub โดยใช้ Secrets ที่ตั้งค่าไว้
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. สร้าง Metadata (tags) สำหรับ Docker image
      #    - tag หนึ่งจะเป็นชื่อตาม matrix (debian, alpine)
      #    - tag หนึ่งจะเป็น latest (สำหรับ debian เท่านั้น เพื่อให้เป็น default)
      #    - tag หนึ่งจะเป็นชื่อ commit hash
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/toolhub
          tags: |
            type=raw,value=${{ matrix.tag }}
            type=raw,value=latest,enable=${{ matrix.tag == 'debian' }}
            type=sha,prefix=

      # 4. Build และ Push image ไปยัง Docker Hub
      #    - 'context' คือ path ของโปรเจกต์
      #    - 'file' คือ path ไปยัง Dockerfile ที่ระบุใน matrix
      #    - 'push' ตั้งเป็น true เพื่อ push image หลังจาก build สำเร็จ
      #    - 'tags' และ 'labels' มาจากขั้นตอนก่อนหน้า
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}