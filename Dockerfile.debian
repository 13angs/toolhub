# Dockerfile for Debian-based distributions (e.g., python:3.11-slim)
# Provides better compatibility for complex packages.

# --- STAGE 1: Build Stage ---
FROM python:3.11-slim AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV POETRY_VERSION=1.8.2

# Set the working directory
WORKDIR /app

# Install system dependencies
# Removed audio-related packages (portaudio, libasound) as they are no longer needed.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg \
    curl \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install "poetry==${POETRY_VERSION}"

# Copy dependency definition files
COPY pyproject.toml poetry.lock* ./

# Disable virtual environment creation by Poetry
RUN poetry config virtualenvs.create false

# Install project dependencies
RUN poetry install --no-dev --no-interaction --no-ansi

# Copy the application source code
COPY . .


# --- STAGE 2: Final Stage ---
FROM python:3.11-slim AS final

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set the working directory
WORKDIR /app

# Install only the necessary runtime system dependencies
# Removed libportaudio2 as it's no longer required by any tool.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy installed Python packages from the builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copy application code from the builder stage
COPY --from=builder /app /app

# Create a non-root user for security
RUN useradd --create-home --shell /bin/bash appuser
USER appuser

# Define the entrypoint
ENTRYPOINT ["python", "toolhub.py"]

# Set the default command
CMD ["--help"]